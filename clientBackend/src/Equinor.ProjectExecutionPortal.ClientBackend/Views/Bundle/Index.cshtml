@using Equinor.ProjectExecutionPortal.ClientBackend.Configurations
@using Equinor.ProjectExecutionPortal.ClientBackend.Services
@using Microsoft.Extensions.Options
@inject IOptions<ClientBundleOptions> ClientBundleOptions;
@inject IOptions<FusionPortalApiOptions> FusionPortalApiOptions;
@inject IOptions<FusionProjectPortalApiOptions> FusionProjectPortalApiOptions;
@inject IOptions<FusionBookmarksOptions> FusionBookmarksOptions;
@inject IOptions<ApplicationInsightsOptions> ApplicationInsightsOptions;
@inject IClientBundleService ClientBundleService;

@{
    var clientBundle = ClientBundleOptions.Value;
    var fusionPortalApi = FusionPortalApiOptions.Value;
    var fusionProjectPortalApi = FusionProjectPortalApiOptions.Value;
    var fusionBookmarks = FusionBookmarksOptions.Value;
    var applicationInsights = ApplicationInsightsOptions.Value;
    var clientBundleFileName = ClientBundleService.GetClientBundleFileName();
}

<div id="root"></div>

<script type="module" src="~/@clientBundleFileName"></script>

@section Headers {
    <script>
        var portalConfig = {
            "portalId": "@clientBundle.PortalId",
            "serviceDiscovery": {
                "client": {
                    "baseUri": "@fusionPortalApi.BaseAddress",
                    "defaultScopes": [
                        "@fusionPortalApi.Scope"
                    ]
                }
            },
            "portalClient": {
                "client": {
                    "baseUri": "@fusionProjectPortalApi.BaseAddress",
                    "defaultScopes": [
                        "@fusionProjectPortalApi.Scope"
                    ]
                }
            },
            "bookmarks": {
                "name": "@fusionBookmarks.Name",
                "identifier": "@fusionBookmarks.Identifier",
                "subsystem": "@fusionBookmarks.Subsystem"
            },
            "msal": {
                "client": {
                    "tenantId": "@clientBundle.Msal!.TenantId",
                    "clientId": "@clientBundle.Msal!.ClientId",
                    "redirectUri": "@clientBundle.Msal!.RedirectUri"
                },
                "options": {
                    "requiresAuth": true
                }
            },
            "logger": {
                "level": 0,
                "defaultClientLogger": {
                    "active": false,
                    "level": 0
                }
            },
            "applicationInsights": {
                "connectionString": "@applicationInsights.ConnectionString"
            },
            "agGrid": {
                "licenseKey": "@clientBundle.AgGrid!.LicenseKey"
            },
            "fusionLegacyEnvIdentifier": "@clientBundle.FusionLegacyEnvIdentifier"
        };

        window["_config_"] = portalConfig;
    </script>

    <script>
      /**
       * When defining a custom element the browser would throw an error if already defined.
       * We would like the portal to provide the latest components
      */
      const _customElementsDefine = window.customElements.define;
      window.customElements.define = (name, cl, conf) => {
        if (!customElements.get(name)) {
          _customElementsDefine.call(window.customElements, name, cl, conf);
        } else {
          console.debug(`duplicate registration of ${name}`);
        }
      };
    </script>
}